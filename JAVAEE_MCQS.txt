 "Basic Concepts of Spring Framework."

1. What is the primary purpose of the Spring Framework?
a. To manage database operations
b. To simplify Java EE development
c. To provide a platform for mobile app development
d. To facilitate JavaScript programming

Answer: b. To simplify Java EE development
Explanation: The Spring Framework aims to simplify Java EE development by providing comprehensive infrastructure support, alleviating the need for boilerplate code, and promoting best practices such as dependency injection.

2. What does Dependency Injection (DI) mean in the context of Spring?
a. Loading dependencies dynamically at runtime
b. Inverting the control of object creation and management
c. Injecting dependencies into client code
d. Establishing database connections

Answer: b. Inverting the control of object creation and management
Explanation: Dependency Injection in Spring involves inverting the control of object creation and letting the Spring IoC container manage the instantiation and wiring of objects, promoting loose coupling.

3. Which of the following is an example of Inversion of Control (IoC) in Spring?
a. A developer manually managing object instantiation
b. Objects defining their dependencies statically
c. Objects registering themselves in a central registry
d. The Spring container managing bean creation and dependency injection

Answer: d. The Spring container managing bean creation and dependency injection
Explanation: Inversion of Control in Spring involves delegating the control of bean creation and wiring to the Spring container, reducing the responsibilities of application code.

4. What is the purpose of the ApplicationContext in Spring?
a. To handle HTTP requests in a web application
b. To manage database connections
c. To provide metadata about beans and their dependencies
d. To control the flow of program execution

Answer: c. To provide metadata about beans and their dependencies
Explanation: The ApplicationContext in Spring provides metadata about beans and their dependencies, acting as a container for managing and assembling beans.

5. Which annotation is commonly used for marking a class as a Spring bean?
a. @Component
b. @Service
c. @Bean
d. @Inject

Answer: a. @Component
Explanation: The @Component annotation is a generic stereotype annotation for any Spring-managed component, and it is often used to mark a class as a bean.

6. What is the primary purpose of the @Autowired annotation in Spring?
a. To create new instances of beans
b. To inject dependencies automatically
c. To handle HTTP requests
d. To specify the scope of a bean

Answer: b. To inject dependencies automatically
Explanation: The @Autowired annotation in Spring is used to automatically inject dependencies into a bean, promoting loose coupling and simplifying configuration.

7. What is the role of the DispatcherServlet in a Spring MVC application?
a. Handling database transactions
b. Managing HTTP sessions
c. Mapping requests to appropriate controllers
d. Authenticating users

Answer: c. Mapping requests to appropriate controllers
Explanation: The DispatcherServlet in Spring MVC is responsible for mapping incoming HTTP requests to the appropriate controller based on configured mappings.

8. Which XML configuration file is commonly used for defining Spring beans?
a. web.xml
b. applicationContext.xml
c. spring-config.xml
d. beans.xml

Answer: b. applicationContext.xml
Explanation: The applicationContext.xml file is a commonly used XML configuration file in Spring for defining beans and their dependencies.

9. What does the term "Aspect-Oriented Programming (AOP)" refer to in Spring?
a. Programming with a focus on the user interface
b. Handling HTTP requests and responses
c. Separating cross-cutting concerns from the main business logic
d. Writing code in a functional programming style

Answer: c. Separating cross-cutting concerns from the main business logic
Explanation: AOP in Spring involves separating cross-cutting concerns, such as logging and transaction management, from the main business logic.

10. Which annotation is commonly used to enable Spring Boot features in a Java application?
a. @SpringBootApplication
b. @EnableSpring
c. @SpringBootConfig
d. @BootableApplication

Answer: a. @SpringBootApplication
Explanation: The @SpringBootApplication annotation is commonly used to enable Spring Boot features in a Java application, providing a convenient way to bootstrap a Spring Boot application.